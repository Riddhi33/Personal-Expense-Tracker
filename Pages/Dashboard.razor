@page "/dashboard"
@inject NavigationManager NavigationManager

@inject GlobalState GlobalState
@using System.Text.Json
@using Todo.Data
@inject IJSRuntime JSRuntime

<h1 class="mb-4">Dashboard</h1>

<div class="row mb-5">
    <div class="col-lg-4 col-md-6 mb-3">
        <div class="card text-white bg-success shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Total Inflows</h5>
                <p class="card-text display-6">@InflowsTotal.ToString("C")</p>
                
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 mb-3">
        <div class="card text-white bg-danger shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Total Outflows</h5>
                <p class="card-text display-6">@OutflowsTotal.ToString("C")</p>
               
            </div>
        </div>
    </div>
    
    <div class="col-lg-4 col-md-12 mb-3">
        <div class="card text-white bg-primary shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Total Amount</h5>
                <p class="card-text display-6">@NetBalance.ToString("C")</p>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-lg-6">
        <h3>Transactions Bargraph</h3>
        <canvas id="transactionsChart" class="mb-3"></canvas>
    </div>
    <div class="col-lg-6">
        <h3>Transaction Pie chart</h3>
        <canvas id="transactionsPieChart" class="mb-3"></canvas>
    </div>
</div>
<br />
<p class="card-text"><strong>Total number of Inflows:</strong> @InflowsCount</p>
<p class="card-text"><strong>Total number of Outflows:</strong> @OutflowsCount</p>
<p class="card-text"><strong>Total number of Debts:</strong> @DebtsCount</p>
<br />
<div class="row">
    <!-- Buttons to toggle sections -->
    <div class="col-lg-12 mb-4">
        <button class="btn btn-success me-2" @onclick="ToggleInflows">View Inflow Details</button>
        <button class="btn btn-danger me-2" @onclick="ToggleOutflows">View Outflow Details</button>
        <button class="btn btn-primary" @onclick="ToggleDebts">View Debts</button>
    </div>
</div>

<div class="row">
    <!-- Inflows Section -->
    @if (showInflows)
    {
        <div class="col-lg-6 mb-4">
            <h3 class="section-title">Inflows</h3>
            <table class="table custom-table">
                <thead>
                    <tr>
                        <th scope="col">Amount</th>
                        <th scope="col">Notes</th>
                        <th scope="col">Tag</th>
                        <th scope="col">Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in (FilteredInflows.Any() ? FilteredInflows : Inflows)
                   .OrderByDescending(t => decimal.TryParse(t.Amount, out var parsedAmount) ? parsedAmount : 0)
                   .Take(5)) // Limiting to top 5 after sorting
                    {
                        <tr>
                            <td>@transaction.Amount</td>
                            <td>@transaction.Notes</td>
                            <td>@transaction.Tag</td>
                            <td>@transaction.DueDate.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="row">
    <!-- Outflows Section -->
    @if (showOutflows)
    {
        <div class="col-lg-6 mb-4">
            <h3 class="section-title">Outflows</h3>
            <table class="table custom-table">
                <thead>
                    <tr>
                        <th scope="col">Amount</th>
                        <th scope="col">Notes</th>
                        <th scope="col">Tag</th>
                        <th scope="col">Due Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in (FilteredOutflows.Any() ? FilteredOutflows : Outflows)
                   .OrderByDescending(t => decimal.TryParse(t.Amount, out var parsedAmount) ? parsedAmount : 0)
                   .Take(5)) // Limiting to top 5 after sorting
                    {
                        <tr>
                            <td>@transaction.Amount</td>
                            <td>@transaction.Notes</td>
                            <td>@transaction.Tag</td>
                            <td>@transaction.DueDate.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="row">
    <!-- Debts Section -->
    @if (showDebts)
    {
        <div class="col-lg-12 mb-4">
            <h3 class="section-title">Debts</h3>
            <table class="table custom-table">
                <thead>
                    <tr>
                        <th scope="col">Source of Debts</th>
                        <th scope="col">Debt Amount</th>
                        <th scope="col">Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in (FilteredDebts.Any() ? FilteredDebts : Debts)
                   .OrderByDescending(d => decimal.TryParse(d.DebtAmount, out var parsedAmount) ? parsedAmount : 0)
                   .Take(5))

                    {
                        <tr>
                            <td>@debt.SourceofDebt</td>
                            <td>@debt.DebtAmount</td>
                            <td>@debt.DueDate.ToString("MMM dd, yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private bool showInflows = false;
    private bool showOutflows = false;
    private bool showDebts = false;

    private void ToggleInflows()
    {
        showInflows = !showInflows;
    }

    private void ToggleOutflows()
    {
        showOutflows = !showOutflows;
    }

    private void ToggleDebts()
    {
        showDebts = !showDebts;
    }

    private string InflowsDateFilter;
    private string OutflowsDateFilter;
    private string InflowsTagFilter = string.Empty;
    private string OutflowsTagFilter = string.Empty;
    private int InflowsCount;
    private int OutflowsCount;
    private int DebtsCount;

    private List<Transaction> FilteredInflows = new();
    private List<Transaction> FilteredOutflows = new();
    private List<Transaction> Transactions = new();
    private List<Transaction> Inflows = new();
    private List<Transaction> Outflows = new();
    private List<Debt> FilteredDebts = new();
    private List<Debt> Debts = new();
    private decimal DebtsTotal; // New: Total debts amount for calculating total depts in net balance.
    private decimal InflowsTotal;
    private decimal OutflowsTotal;
    private decimal NetBalance;
    public static GlobalState _globalState { get; set; }
    private List<Transaction> _todos { get; set; }

    protected override void OnInitialized()
    {
        FilteredInflows = Inflows;
        FilteredOutflows = Outflows;
        FilteredDebts = Debts;

        // Ensure the current user is loaded
        if (GlobalState.CurrentUser == null || GlobalState.CurrentUser.Id == Guid.Empty)
        {
            return;
        }

        // Fetch all transactions for the current user
        Guid userId = GlobalState.CurrentUser.Id;
        _todos = TodosService.GetAll(userId);

        // Fetch debts and calculate the total debt amount
        Debts = DebtsService.GetAll(userId);

        // Calculate net balance
        Transactions = GetAll(userId);


        // Filter and calculate summaries
        Inflows = _todos
        .Where(t => t.TaskName == "Inflows")
        .Select(t => new Transaction
            {
                Amount = decimal.TryParse(t.Amount, out var result) ? result.ToString() : "0", // Ensure Amount is numeric
                Notes = t.Notes,
                Tag = t.Tag,
                DueDate = t.DueDate
            })
        .OrderByDescending(t => decimal.Parse(t.Amount)) // Sort numerically by Amount
        .ToList();

        Outflows = _todos
        .Where(t => t.TaskName == "Outflows")
        .Select(t => new Transaction
            {
                Amount = decimal.TryParse(t.Amount, out var result) ? result.ToString() : "0",
                Notes = t.Notes,
                Tag = t.Tag,
                DueDate = t.DueDate
            })
        .OrderByDescending(t => decimal.Parse(t.Amount)) // Sort numerically by Amount
        .ToList();

        InflowsCount = Inflows.Count;
        OutflowsCount = Outflows.Count;
        DebtsCount = Debts.Count;

        DebtsTotal = Debts.Sum(d => decimal.TryParse(d.DebtAmount, out var result) ? result : 0);



        InflowsTotal = Inflows.Sum(t => decimal.TryParse(t.Amount, out var result) ? result : 0)
                       +Debts.Sum(d => decimal.TryParse(d.DebtAmount, out var debtAmount) ? debtAmount : 0);

        OutflowsTotal = Outflows.Sum(t => decimal.TryParse(t.Amount, out var result) ? result : 0);
        NetBalance = (InflowsTotal - OutflowsTotal) ;
    }

   

   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChart();
            await InitializePieChart();
        }
    }

    private async Task InitializeChart()
    {
        var chartData = new
        {
            labels = new[] { "Inflows", "Outflows", "Debts" },
            datasets = new[]
            {
                new
                {
                    data = new[] { InflowsTotal, OutflowsTotal, DebtsTotal },
                    backgroundColor = new[] { "#28a745", "#dc3545", "#007bff" }
                }
            }
        };

        var chartOptions = new
        {
            responsive = true,
            plugins = new
            {
                legend = new { position = "top" }
            },
            scales = new
            {
                x = new { beginAtZero = true },
                y = new { beginAtZero = true }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderBarChart", "transactionsChart", chartData, chartOptions);
    }

    private async Task InitializePieChart()
    {
        var pieChartData = new
        {
            labels = new[] { "Inflows", "Outflows", "Debts" },
            datasets = new[]
            {
                new
                {
                    data = new[] { InflowsTotal, OutflowsTotal, DebtsTotal },
                    backgroundColor = new[] { "#28a745", "#dc3545", "#007bff" }
                }
            }
        };

        var pieChartOptions = new
        {
            responsive = true,
            plugins = new
            {
                legend = new { position = "bottom" }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderPieChart", "transactionsPieChart", pieChartData, pieChartOptions);
    }

    public static List<Transaction> GetAll(Guid userId)
    {
        string todosFilePath = Utils.GetTodosFilePath(userId);
        if (!File.Exists(todosFilePath))
        {
            return new List<Transaction>();
        }

        var json = File.ReadAllText(todosFilePath);
        return JsonSerializer.Deserialize<List<Transaction>>(json);
    }
}
