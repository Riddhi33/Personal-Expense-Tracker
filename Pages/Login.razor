@page "/login"
@inject NavigationManager NavManager
@inject GlobalState GlobalState


<div class="login-body">
    <div class="form-login">
        <form class="text-center" @onsubmit="LoginHandler">
            
           
            <h6>Login</h6>
            @if (_showDefaultCredentials)
            {
                <div class="alert alert-info" role="alert">
                    Username: <strong>@UsersService.SeedUsername</strong><br />
                    Password: <strong>@UsersService.SeedPassword</strong>
                </div>
            }

            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_username" placeholder="Username" />
                <label for="floatingInput">Username</label>
            </div>
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>

            <div class="form-floating mb-3">
                <select class="form-control currency" @bind="_preferredCurrency">
                    
                    <option value="NPR">NPR</option>
                    <option value="INR">INR</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="AUD">AUD</option>
                </select>
                <label for="preferredCurrency">Preferred Currency</label>
            </div>


            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <AlertMessage Type="danger" Message="@_errorMessage" />
            }
            <button class="w-100 btn btn-lg btn-primary" type="submit">
                <span class="oi oi-account-login"></span> Login
            </button>
        </form>
    </div>
</div>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showDefaultCredentials { get; set; }
    private string _username { get; set; }
    private string _password { get; set; }
    private string _preferredCurrency { get; set; }
    private string _errorMessage = "";

    protected override void OnInitialized()
    {

        System.Diagnostics.Debug.WriteLine($"hello debugger!");
        try
        {
            var user = UsersService.Login(UsersService.SeedUsername, UsersService.SeedPassword);
            _showDefaultCredentials = user.HasInitialPassword;


        }
        catch
        {
            _globalState.CurrentUser = null;
            _errorMessage = "";
        }


    }

    private void LoginHandler()
    {
        try
        {
            _errorMessage = "";
            _globalState.CurrentUser = UsersService.Login(_username, _password);
            GlobalState.CurrentUser = _globalState.CurrentUser;

            // Save preferred currency to user's data
            if (!string.IsNullOrEmpty(_preferredCurrency))
            {
                UsersService.UpdatePreferredCurrency(_globalState.CurrentUser.Id, _preferredCurrency);
            }

            if (_globalState.CurrentUser != null)
            {
                NavManager.NavigateTo(_globalState.CurrentUser.HasInitialPassword ? "/change-password" : "/");
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    public static void UpdatePreferredCurrency(Guid userId, string preferredCurrency)
{
        List<User> users = UsersService.GetAll(); // Use UsersService to call GetAll
    User user = users.FirstOrDefault(x => x.Id == userId);

    if (user == null)
    {
        throw new Exception("User not found.");
    }

    user.PreferredCurrency = preferredCurrency;
       UsersService.SaveAll(users); // Use UsersService to call SaveAll
}


}
