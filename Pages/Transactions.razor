@page "/transactions"
@inject GlobalState GlobalState


<nav class="navbar navbar-expand-lg navbar-light bg-primary text-white p-3 shadow-sm">
    <div class="container-fluid">
        <h1 class="navbar-brand mb-0 h1 text-white">Transactions</h1>
        <input type="search" class="form-control search" style="width: 250px" placeholder="Search" @oninput="SearchTaskName" />
        <button class="btn btn-light btn-lg shadow-sm" type="button" @onclick="OpenAddTodoDialog">
            <i class="bi bi-plus-circle-fill me-2"></i> Add Transactions
        </button>
    </div>
</nav>

<table class="table" style="border: 2px solid">
    <thead style="border: 2px solid">
        <tr style="border: 2px solid">
            
            <th>
                <div class="d-flex">
                    Transaction Type
                    <a class='btn text-@(_sortBy == "taskName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("taskName")'>
                        <span class='oi oi-sort-@(_sortBy == "taskName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Amount
                    <a class='btn text-@(_sortBy == "Amount" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("Amount")'>
                        <span class='oi oi-sort-@(_sortBy == "Amount" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Notes
                    <a class='btn text-@(_sortBy == "Notes" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("Notes")'>
                        <span class='oi oi-sort-@(_sortBy == "Notes" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Tag
                    <a class='btn text-@(_sortBy == "Tag" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("Tag")'>
                        <span class='oi oi-sort-@(_sortBy == "Tag" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>

            <th>
                <div class="d-flex">
                    Transaction Date
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Transaction> todoList = _todos;
            // if (_sortBy == "status")
            // {
            //     todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.IsDone) : todoList.OrderByDescending(t =>
            //     t.IsDone);
            // }
            if (_sortBy == "taskName")
            {
                todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.TaskName) : todoList.OrderByDescending(t =>
                t.TaskName);
            }
            else if (_sortBy == "Amount")
            {
                todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.Amount) : todoList.OrderByDescending(t =>
                t.Amount);
            }
            else if (_sortBy == "Notes")
            {
                todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.Notes) : todoList.OrderByDescending(t =>
                t.Notes);
            }
            else if (_sortBy == "Tag")
            {
                todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.Tag) : todoList.OrderByDescending(t =>
                t.Tag);
            }
            else if (_sortBy == "createdAt")
            {
                todoList = _sortDirection == "ascending" ? todoList.OrderBy(t => t.CreatedAt) : todoList.OrderByDescending(t =>
                t.CreatedAt);
            }

            if (_tabFilter == "Due")
            {
                todoList = todoList.Where(t => !t.IsDone);
            }
            else if (_tabFilter == "Done")
            {
                todoList = todoList.Where(t => t.IsDone);
            }

            foreach (var Transaction in todoList)
            {
                <tr>
                    
                    <td class='@(Transaction.IsDone ? "text-decoration-line-through" : "")'>@Transaction.TaskName</td>
                    <td class='@(Transaction.IsDone ? "text-decoration-line-through" : "")'>@Transaction.Amount</td>
                    <td class='@(Transaction.IsDone ? "text-decoration-line-through" : "")'>@Transaction.Notes</td>
                    <td class='@(Transaction.IsDone ? "text-decoration-line-through" : "")'>@Transaction.Tag</td>

                    <td>
                        <p class="small mb-0">
                            @Transaction.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                        </p>
                    </td>
                    <td>
                        <button disabled="@Transaction.IsDone" class="btn btn-primary text-white me-2" type="button"
                                style="background-color: #007bff; border: none;" @onclick="()=>OpenEditTodoDialog(Transaction)">
                            <i class="fas fa-pencil-alt"></i> Edit
                        </button>
                        <br />
                        <br />
                        <button class="btn text-white" type="button"
                                style="background-color: #dc3545; border: none;" @onclick="()=>OpenDeleteTodoDialog(Transaction)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (_showEditTodoDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <select id="TransactionType" class="form-control" @bind="_todoModel.TaskName">
                <option value="" disabled selected>Select the type</option>
                <option value="Inflows">Inflows</option>
                <option value="Outflows">Outflows</option>
            </select>
            <label for="TransactionType">Transaction Type</label>
        </div>
        <div class="form-floating">
            <input id="Amount" type="text" class="form-control" @bind="_todoModel.Amount" placeholder="Amount"
                   @oninput="ValidateAmount" />
            <label for="Amount">Amount</label>
            
        </div>
        <div class="form-floating">
            <input id="Notes" type="text" class="form-control" @bind="_todoModel.Notes" placeholder="Notes" />
            <label for="Notes">Notes</label>
        </div>
        <div class="form-floating">
            <select id="Tag" class="form-control" @onchange="HandleTagChange">
                <option value="" disabled selected>Select Tag</option>
                <option value="Monthly">Monthly</option>
                <option value="Groceries">Groceries</option>
                <option value="Rent">Rent</option>
                <option value="Salary">Salary</option>
                <option value="Food">Food</option>
                <option value="Other">Other</option>
            </select>
            <label for="Tag">Tag</label>
        </div>
        @if (_isOtherTag)
        {
            <div class="form-floating mt-3">
                <input id="OtherTag" type="text" class="form-control" @bind="_todoModel.Tag" placeholder="Other Tag" />
                <label for="OtherTag">Other Tag</label>
            </div>
        }
        <div class="form-floating">
         <label for="dueDate">Date</label>
            <input id="dueDate" type="date"
                   @bind="_todoModel.DueDate"
                   class="form-control text-left"
                   placeholder="Date">
     </div> 

        @if (!string.IsNullOrEmpty(_editTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editTodoErrorMessage" />
        } 
    </ModalDialog>
}

@if (_showDeleteTodoDialog)
{
    <ModalDialog Title="Delete Transactions" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete the transaction?</p>
        @* <p>Are you sure you want to delete <strong>@_deleteTodo.Amount</strong> amount?</p>
        <p>Are you sure you want to delete <strong>@_deleteTodo.Notes</strong> notes?</p>
        <p>Are you sure you want to delete <strong>@_deleteTodo.Tag</strong> tag?</p> *@
        @if (!string.IsNullOrEmpty(_deleteTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTodoErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTodoDialog { get; set; }

    private bool _showDeleteTodoDialog { get; set; }
    private List<Transaction> _todos { get; set; }
    private Transaction _deleteTodo { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTodoErrorMessage { get; set; }
    private string _deleteTodoErrorMessage { get; set; }
    private Transaction _todoModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private decimal DebtsTotal;
    private bool _isOtherTag = false;


    private void HandleTagChange(ChangeEventArgs e)
    {
        var selectedTag = e.Value?.ToString();
        if (selectedTag == "Other")
        {
            _isOtherTag = true;
            _todoModel.Tag = string.Empty; // Clear the tag value for custom input
        }
        else
        {
            _isOtherTag = false;
            _todoModel.Tag = selectedTag; // Set the selected tag
        }
    }

    private void ValidateAmount(ChangeEventArgs e)
    {
        if (!decimal.TryParse(e.Value?.ToString(), out var amount) || amount <= 0)
        {
            _editTodoErrorMessage = "Please enter valid amount";
        }
        else
        {
            _editTodoErrorMessage = string.Empty; // Clear error
        }
    }

    protected override void OnInitialized()
    {
        _todos = TodosService.GetAll(_globalState.CurrentUser.Id);
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Transaction";
        _dialogOkLabel = "Add";
        _todoModel = new Transaction();
        _todoModel.Id = Guid.Empty;
        _showEditTodoDialog = true;
    }



    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _todos = TodosService.GetAll(_globalState.CurrentUser.Id).Where(t =>
            t.TaskName.ToLower().Contains(searchTerm.ToLower()) ||
            (!string.IsNullOrEmpty(t.Tag) && t.Tag.ToLower().Contains(searchTerm.ToLower())) // Search in Tags
        ).ToList();
        }
        else
        {
            _todos = TodosService.GetAll(_globalState.CurrentUser.Id);
        }
    }

    private void OpenEditTodoDialog(Transaction editTodo)
    {
        _dialogTitle = "Edit Transaction";
        _dialogOkLabel = "Save";

        _todoModel = editTodo;

        _showEditTodoDialog = true;
    }

    private void OpenDeleteTodoDialog(Transaction todoItem)
    {
        _deleteTodo = todoItem;
        _showDeleteTodoDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _todoModel.DueDate = DateTime.Parse(e.Value.ToString());
    }

    

    private void OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditTodoDialog = false;
            return;
        }

        try
        {
            _editTodoErrorMessage = "";

            // **Validation Section for validating users details
            // Check if TaskName is empty
            if (string.IsNullOrWhiteSpace(_todoModel.TaskName))
            {
                _editTodoErrorMessage = "Transaction Type is required.";
                return;
            }

            // Check if Amount is valid and positive
            if (!decimal.TryParse(_todoModel.Amount, out var amount) || amount <= 0)
            {
                _editTodoErrorMessage = "Please enter valid amount";
                return;
            }

            // Validate DueDate (optional, if required)
            // if (_todoModel.DueDate < DateTime.Today)
            // {
            //     _editTodoErrorMessage = "Due date cannot be in the past.";
            //     return;
            // }

            // Validation for checking if the outflows exceed the net balance
            if (_todoModel.TaskName == "Outflows")
            {
                decimal currentNetBalance = _todos.Where(t => t.TaskName == "Inflows")
                                                  .Sum(t => decimal.TryParse(t.Amount, out var inflow) ? inflow : 0)
                                         - _todos.Where(t => t.TaskName == "Outflows" && t.Id != _todoModel.Id)
                                                  .Sum(t => decimal.TryParse(t.Amount, out var outflow) ? outflow : 0);

                decimal debtsTotal = DebtsService.GetAll(GlobalState.CurrentUser.Id)
                                 .Sum(d => decimal.TryParse(d.DebtAmount, out var debt) ? debt : 0);

                currentNetBalance = currentNetBalance + debtsTotal;

                if (amount > currentNetBalance)
                {
                    _editTodoErrorMessage = $"You don't have sufficient balance.";
                    return;
                }
            }

            // **Proceed with Form Submission**
            if (_todoModel.Id == Guid.Empty)
            {
                _todos = TodosService.Create(
                    _globalState.CurrentUser.Id,
                    _todoModel.TaskName,
                    _todoModel.Amount,
                    _todoModel.Notes,
                    _todoModel.Tag,
                    _todoModel.DueDate);
            }
            else
            {
                _todos = TodosService.Update(
                    _globalState.CurrentUser.Id,
                    _todoModel.Id,
                    _todoModel.TaskName,
                    _todoModel.Amount,
                    _todoModel.Notes,
                    _todoModel.Tag,
                    _todoModel.DueDate,
                    _todoModel.IsDone);
            }

            _showEditTodoDialog = false;
        }
        catch (Exception e)
        {
            _editTodoErrorMessage = e.Message;
        }
    }


    private void OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteTodoDialog = false;
            _deleteTodo = null;
        }
        else
        {
            try
            {
                _deleteTodoErrorMessage = "";
                _todos = TodosService.Delete(_globalState.CurrentUser.Id, _deleteTodo.Id);
                _showDeleteTodoDialog = false;
                _deleteTodo = null;
            }
            catch (Exception e)
            {
                _deleteTodoErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }
    private void ToggleDone(Transaction todo)
    {
        todo.IsDone = !todo.IsDone;
        _todos = TodosService.Update(_globalState.CurrentUser.Id, todo.Id, todo.TaskName, todo.Amount, todo.Notes, todo.Tag, todo.DueDate, todo.IsDone);
    }
}